<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://varedisy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://varedisy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-05T09:57:07+00:00</updated><id>https://varedisy.github.io/feed.xml</id><title type="html">not_on_stack</title><entry><title type="html">Integrating Riverpod with Firebase Authentication in Flutter</title><link href="https://varedisy.github.io/blog/2024/riverpod-firebase-auth/" rel="alternate" type="text/html" title="Integrating Riverpod with Firebase Authentication in Flutter"/><published>2024-09-04T12:00:00+00:00</published><updated>2024-09-04T12:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/riverpod-firebase-auth</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/riverpod-firebase-auth/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Firebase Authentication is a powerful tool for managing user sign-ins in a Flutter app. This guide demonstrates how to integrate Firebase Authentication with Riverpod, leveraging the <code class="language-plaintext highlighter-rouge">StreamNotifier</code> API for managing authentication state in a structured and reactive way.</p> <p>This article assumes that you already have Firebase installed and configured in your Flutter project, and you have a basic understanding of Riverpod and its provider system.</p> <h2 id="setting-up-firebaseauth-provider">Setting up FirebaseAuth Provider</h2> <p>First, we need a Riverpod provider to expose the <code class="language-plaintext highlighter-rouge">FirebaseAuth</code> instance to the app. This instance will be used to access the authentication features provided by Firebase.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:firebase_auth/firebase_auth.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:riverpod_annotation/riverpod_annotation.dart'</span><span class="o">;</span>

<span class="kn">part</span> <span class="s">'auth_provider.g.dart'</span><span class="o">;</span>

<span class="nd">@riverpod</span>
<span class="n">FirebaseAuth</span> <span class="nf">firebaseAuth</span><span class="p">(</span><span class="n">FirebaseAuthRef</span> <span class="n">ref</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">FirebaseAuth</span><span class="o">.</span><span class="na">instance</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This <code class="language-plaintext highlighter-rouge">firebaseAuthProvider</code> makes the <code class="language-plaintext highlighter-rouge">FirebaseAuth</code> instance available to the rest of the app.</p> <h2 id="managing-authentication-state">Managing Authentication State</h2> <p>We’ll now manage the user’s authentication state. <code class="language-plaintext highlighter-rouge">FirebaseAuth</code> provides a stream that notifies us when the authentication state changes. We can wrap this stream in a <code class="language-plaintext highlighter-rouge">StreamNotifier</code> to update the state reactively within our app.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:firebase_auth/firebase_auth.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:riverpod_annotation/riverpod_annotation.dart'</span><span class="o">;</span>

<span class="kn">part</span> <span class="s">'auth_state_provider.g.dart'</span><span class="o">;</span>

<span class="nd">@riverpod</span>
<span class="kd">class</span> <span class="nc">AuthNotifier</span> <span class="kd">extends</span> <span class="n">_$AuthNotifier</span> <span class="p">{</span>

  <span class="nd">@override</span>
  <span class="n">Stream</span><span class="p">&lt;</span><span class="n">User</span><span class="o">?</span><span class="p">&gt;</span> <span class="n">build</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">firebaseAuth</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">watch</span><span class="p">(</span><span class="n">firebaseAuthProvider</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">firebaseAuth</span><span class="o">.</span><span class="na">authStateChanges</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">signIn</span><span class="p">(</span><span class="kt">String</span> <span class="n">email</span><span class="p">,</span> <span class="kt">String</span> <span class="n">password</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">firebaseAuth</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">read</span><span class="p">(</span><span class="n">firebaseAuthProvider</span><span class="p">);</span>
    <span class="k">await</span> <span class="n">firebaseAuth</span><span class="o">.</span><span class="na">signInWithEmailAndPassword</span><span class="p">(</span><span class="nl">email:</span> <span class="n">email</span><span class="p">,</span> <span class="nl">password:</span> <span class="n">password</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Future</span><span class="p">&lt;</span><span class="kt">void</span><span class="p">&gt;</span> <span class="n">signOut</span><span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">firebaseAuth</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">read</span><span class="p">(</span><span class="n">firebaseAuthProvider</span><span class="p">);</span>
    <span class="k">await</span> <span class="n">firebaseAuth</span><span class="o">.</span><span class="na">signOut</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">AuthNotifier</code> here automatically updates the state when Firebase authentication events occur. It also provides <code class="language-plaintext highlighter-rouge">signIn</code> and <code class="language-plaintext highlighter-rouge">signOut</code> methods that allow users to authenticate via Firebase.</p> <p>Now that we have a reactive provider that updates the authentication state automatically, we can use it in the UI.</p> <h2 id="signing-in-and-out">Signing In and Out</h2> <p>Let’s now use our <code class="language-plaintext highlighter-rouge">AuthNotifier</code> to sign in and out. We will build a sign-in page where the user can input their credentials and trigger the <code class="language-plaintext highlighter-rouge">signIn</code> method. Similarly, we can add a button to sign out.</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:flutter_riverpod/flutter_riverpod.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">SignInPage</span> <span class="kd">extends</span> <span class="n">ConsumerWidget</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">WidgetRef</span> <span class="n">ref</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">authNotifier</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">read</span><span class="p">(</span><span class="n">authNotifierProvider</span><span class="o">.</span><span class="na">notifier</span><span class="p">);</span>
    <span class="kd">final</span> <span class="n">authState</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">watch</span><span class="p">(</span><span class="n">authNotifierProvider</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Sign In'</span><span class="p">)),</span>
      <span class="nl">body:</span> <span class="n">Padding</span><span class="p">(</span>
        <span class="nl">padding:</span> <span class="kd">const</span> <span class="n">EdgeInsets</span><span class="o">.</span><span class="na">all</span><span class="p">(</span><span class="mf">16.0</span><span class="p">),</span>
        <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">authState</span><span class="o">.</span><span class="na">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">...[</span>
              <span class="n">Text</span><span class="p">(</span><span class="s">'Logged in as: </span><span class="si">${authState.value?.email}</span><span class="s">'</span><span class="p">),</span>
              <span class="n">ElevatedButton</span><span class="p">(</span>
                <span class="nl">onPressed:</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
                  <span class="k">await</span> <span class="n">authNotifier</span><span class="o">.</span><span class="na">signOut</span><span class="p">();</span>
                  <span class="n">ScaffoldMessenger</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">showSnackBar</span><span class="p">(</span><span class="n">SnackBar</span><span class="p">(</span><span class="nl">content:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Signed out!'</span><span class="p">)));</span>
                <span class="p">},</span>
                <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Sign Out'</span><span class="p">),</span>
              <span class="p">),</span>
            <span class="p">]</span> <span class="k">else</span> <span class="p">...[</span>
              <span class="n">TextField</span><span class="p">(</span>
                <span class="nl">controller:</span> <span class="n">TextEditingController</span><span class="p">(),</span>
                <span class="nl">decoration:</span> <span class="n">InputDecoration</span><span class="p">(</span><span class="nl">labelText:</span> <span class="s">'Email'</span><span class="p">),</span>
              <span class="p">),</span>
              <span class="n">TextField</span><span class="p">(</span>
                <span class="nl">controller:</span> <span class="n">TextEditingController</span><span class="p">(),</span>
                <span class="nl">decoration:</span> <span class="n">InputDecoration</span><span class="p">(</span><span class="nl">labelText:</span> <span class="s">'Password'</span><span class="p">),</span>
                <span class="nl">obscureText:</span> <span class="kc">true</span><span class="p">,</span>
              <span class="p">),</span>
              <span class="n">ElevatedButton</span><span class="p">(</span>
                <span class="nl">onPressed:</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
                  <span class="k">try</span> <span class="p">{</span>
                    <span class="k">await</span> <span class="n">authNotifier</span><span class="o">.</span><span class="na">signIn</span><span class="p">(</span><span class="s">'email@example.com'</span><span class="p">,</span> <span class="s">'password123'</span><span class="p">);</span>
                    <span class="n">ScaffoldMessenger</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">showSnackBar</span><span class="p">(</span><span class="n">SnackBar</span><span class="p">(</span><span class="nl">content:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Signed in!'</span><span class="p">)));</span>
                  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">ScaffoldMessenger</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">showSnackBar</span><span class="p">(</span><span class="n">SnackBar</span><span class="p">(</span><span class="nl">content:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Sign in failed: </span><span class="si">$e</span><span class="s">'</span><span class="p">)));</span>
                  <span class="p">}</span>
                <span class="p">},</span>
                <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Sign In'</span><span class="p">),</span>
              <span class="p">),</span>
            <span class="p">],</span>
          <span class="p">],</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="explanation">Explanation:</h3> <ul> <li>The <code class="language-plaintext highlighter-rouge">authState.value</code> checks whether the user is authenticated or not. If the user is signed in, it displays their email and a sign-out button. If not, it shows the sign-in form.</li> <li>The <code class="language-plaintext highlighter-rouge">signIn</code> and <code class="language-plaintext highlighter-rouge">signOut</code> methods are accessed through the <code class="language-plaintext highlighter-rouge">authNotifier</code>, which manages the authentication state.</li> </ul> <h2 id="handling-errors">Handling Errors</h2> <p>To provide feedback in case of an error, we can catch exceptions thrown by Firebase’s authentication methods, such as incorrect passwords or missing user accounts, and display them to the user.</p> <p>Here’s an example of how we can handle errors during sign-in:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="n">ref</span><span class="o">.</span><span class="na">read</span><span class="p">(</span><span class="n">authNotifierProvider</span><span class="o">.</span><span class="na">notifier</span><span class="p">)</span><span class="o">.</span><span class="na">signIn</span><span class="p">(</span><span class="s">'email@example.com'</span><span class="p">,</span> <span class="s">'password123'</span><span class="p">);</span>
    <span class="p">}</span> <span class="kd">on</span> <span class="n">FirebaseAuthException</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">String</span> <span class="n">errorMessage</span><span class="p">;</span>
      <span class="k">switch</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="na">code</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="s">'user-not-found'</span><span class="o">:</span>
          <span class="n">errorMessage</span> <span class="o">=</span> <span class="s">'No user found for that email.'</span><span class="p">;</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="s">'wrong-password'</span><span class="o">:</span>
          <span class="n">errorMessage</span> <span class="o">=</span> <span class="s">'Wrong password provided.'</span><span class="p">;</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="o">:</span>
          <span class="n">errorMessage</span> <span class="o">=</span> <span class="s">'Something went wrong. Please try again.'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">ScaffoldMessenger</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">showSnackBar</span><span class="p">(</span><span class="n">SnackBar</span><span class="p">(</span><span class="nl">content:</span> <span class="n">Text</span><span class="p">(</span><span class="n">errorMessage</span><span class="p">)));</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Sign In'</span><span class="p">),</span>
<span class="p">);</span>
</code></pre></div></div> <p>This pattern allows us to catch Firebase-specific exceptions and provide the user with actionable feedback.</p> <h2 id="conclusion">Conclusion</h2> <p>In this article, we demonstrated how to integrate Firebase Authentication with Riverpod using the <code class="language-plaintext highlighter-rouge">StreamNotifier</code> API. This approach provides a reactive and efficient way to manage authentication state in a Flutter app. We covered how to set up the FirebaseAuth provider, manage the user’s authentication state, handle sign-in and sign-out functionality, and show meaningful error messages to users.</p> <p>By combining the power of Firebase and Riverpod, you can build secure, scalable, and maintainable authentication flows in your Flutter applications.</p>]]></content><author><name></name></author><category term="flutter,"/><category term="riverpod,"/><category term="firebase-auth,"/><category term="authentication"/><summary type="html"><![CDATA[Learn how to manage Firebase Authentication in Flutter using Riverpod and StreamNotifier.]]></summary></entry><entry><title type="html">Getting started with Riverpod in Flutter</title><link href="https://varedisy.github.io/blog/2024/riverpod-getting-started/" rel="alternate" type="text/html" title="Getting started with Riverpod in Flutter"/><published>2024-09-04T10:00:00+00:00</published><updated>2024-09-04T10:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/riverpod-getting-started</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/riverpod-getting-started/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Riverpod is a powerful state management solution for Flutter, providing a clean, testable, and scalable way to manage state across your app. In this guide, we’ll walk you through getting started with Riverpod, from installation to creating and consuming providers, and even making network requests using Riverpod.</p> <h2 id="installing-riverpod">Installing Riverpod</h2> <p>To get started with Riverpod, you first need to add the required dependencies to your <code class="language-plaintext highlighter-rouge">pubspec.yaml</code>. Here’s how you can do that:</p> <h3 id="adding-dependencies">Adding dependencies</h3> <p>Open your terminal and run the following commands to install the necessary packages:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flutter pub add flutter_riverpod
flutter pub add riverpod_annotation
flutter pub add dev:riverpod_generator
flutter pub add dev:build_runner
flutter pub add dev:custom_lint
flutter pub add dev:riverpod_lint
</code></pre></div></div> <p>Alternatively, you can manually add them to your <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">my_app_name</span>
<span class="na">environment</span><span class="pi">:</span>
  <span class="na">sdk</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&gt;=3.0.0</span><span class="nv"> </span><span class="s">&lt;4.0.0"</span>
  <span class="na">flutter</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&gt;=3.0.0"</span>

<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">flutter</span><span class="pi">:</span>
    <span class="na">sdk</span><span class="pi">:</span> <span class="s">flutter</span>
  <span class="na">flutter_riverpod</span><span class="pi">:</span> <span class="s">^2.5.1</span>
  <span class="na">riverpod_annotation</span><span class="pi">:</span> <span class="s">^2.3.5</span>

<span class="na">dev_dependencies</span><span class="pi">:</span>
  <span class="na">build_runner</span><span class="pi">:</span>
  <span class="na">custom_lint</span><span class="pi">:</span>
  <span class="na">riverpod_generator</span><span class="pi">:</span> <span class="s">^2.4.3</span>
  <span class="na">riverpod_lint</span><span class="pi">:</span> <span class="s">^2.3.13</span>
</code></pre></div></div> <p>After adding the dependencies, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flutter pub get
</code></pre></div></div> <p>This will install all required packages.</p> <p>Next, to generate code with Riverpod, run the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flutter pub run build_runner watch
</code></pre></div></div> <h2 id="creating-a-provider">Creating a Provider</h2> <p>Now that you have Riverpod installed, let’s create your first provider. Providers in Riverpod store a value that can be accessed and updated throughout the app.</p> <p>Here’s an example of a simple provider that returns a string:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:riverpod_annotation/riverpod_annotation.dart'</span><span class="o">;</span>

<span class="kn">part</span> <span class="s">'main.g.dart'</span><span class="o">;</span>

<span class="nd">@riverpod</span>
<span class="kt">String</span> <span class="nf">helloWorld</span><span class="p">(</span><span class="n">HelloWorldRef</span> <span class="n">ref</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s">'Hello world'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">@riverpod</code> annotation enables code generation, creating the <code class="language-plaintext highlighter-rouge">helloWorldProvider</code> for you.</p> <h2 id="consuming-providers">Consuming Providers</h2> <p>To use the provider in your Flutter UI, you need to wrap your widget tree with a <code class="language-plaintext highlighter-rouge">ProviderScope</code>. This is where Riverpod stores the state for all your providers:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">runApp</span><span class="p">(</span>
    <span class="n">ProviderScope</span><span class="p">(</span>
      <span class="nl">child:</span> <span class="n">MyApp</span><span class="p">(),</span>
    <span class="p">),</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Inside your widgets, you can consume the provider using the <code class="language-plaintext highlighter-rouge">ref.watch()</code> method:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:flutter/material.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:flutter_riverpod/flutter_riverpod.dart'</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">MyApp</span> <span class="kd">extends</span> <span class="n">ConsumerWidget</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">WidgetRef</span> <span class="n">ref</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="kt">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">watch</span><span class="p">(</span><span class="n">helloWorldProvider</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">MaterialApp</span><span class="p">(</span>
      <span class="nl">home:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Riverpod Example'</span><span class="p">)),</span>
        <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
          <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="n">value</span><span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Running this app will display “Hello world” on the screen.</p> <h2 id="network-requests-with-riverpod">Network Requests with Riverpod</h2> <p>Riverpod also simplifies making network requests. Let’s make a network request using a provider to fetch data from an API.</p> <p>First, define a model for the response data:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:freezed_annotation/freezed_annotation.dart'</span><span class="o">;</span>

<span class="kn">part</span> <span class="s">'activity.freezed.dart'</span><span class="o">;</span>
<span class="kn">part</span> <span class="s">'activity.g.dart'</span><span class="o">;</span>

<span class="nd">@freezed</span>
<span class="kd">class</span> <span class="nc">Activity</span> <span class="k">with</span> <span class="n">_$Activity</span> <span class="p">{</span>
  <span class="kd">factory</span> <span class="n">Activity</span><span class="p">({</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">activity</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">String</span> <span class="n">type</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">int</span> <span class="n">participants</span><span class="p">,</span>
    <span class="kd">required</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span>
  <span class="p">})</span> <span class="o">=</span> <span class="n">_Activity</span><span class="p">;</span>

  <span class="kd">factory</span> <span class="n">Activity</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span> <span class="n">json</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_$ActivityFromJson</span><span class="p">(</span><span class="n">json</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Next, create a provider that makes the HTTP request:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:convert'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:http/http.dart'</span> <span class="k">as</span> <span class="n">http</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:riverpod_annotation/riverpod_annotation.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'activity.dart'</span><span class="o">;</span>

<span class="kn">part</span> <span class="s">'provider.g.dart'</span><span class="o">;</span>

<span class="nd">@riverpod</span>
<span class="n">Future</span><span class="p">&lt;</span><span class="n">Activity</span><span class="p">&gt;</span> <span class="n">activity</span><span class="p">(</span><span class="n">ActivityRef</span> <span class="n">ref</span><span class="p">)</span> <span class="kd">async</span> <span class="p">{</span>
  <span class="kd">final</span> <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">http</span><span class="o">.</span><span class="na">get</span><span class="p">(</span><span class="kt">Uri</span><span class="o">.</span><span class="na">https</span><span class="p">(</span><span class="s">'www.boredapi.com'</span><span class="p">,</span> <span class="s">'/api/activity'</span><span class="p">));</span>
  <span class="kd">final</span> <span class="n">json</span> <span class="o">=</span> <span class="n">jsonDecode</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="p">)</span> <span class="k">as</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;;</span>
  <span class="k">return</span> <span class="n">Activity</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">json</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Finally, consume this provider in your UI:</p> <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Home</span> <span class="kd">extends</span> <span class="n">ConsumerWidget</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">WidgetRef</span> <span class="n">ref</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="n">activity</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">watch</span><span class="p">(</span><span class="n">activityProvider</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">Scaffold</span><span class="p">(</span>
      <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span><span class="nl">title:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Random Activity'</span><span class="p">)),</span>
      <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
        <span class="nl">child:</span> <span class="n">activity</span><span class="o">.</span><span class="na">when</span><span class="p">(</span>
          <span class="nl">data:</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">Text</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="na">activity</span><span class="p">),</span>
          <span class="nl">loading:</span> <span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="kd">const</span> <span class="n">CircularProgressIndicator</span><span class="p">(),</span>
          <span class="nl">error:</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">stack</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Error: </span><span class="si">$err</span><span class="s">'</span><span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>With this setup, Riverpod manages network requests and state changes efficiently.</p> <h2 id="conclusion">Conclusion</h2> <p>Riverpod provides a scalable, testable solution for state management in Flutter, making it easy to handle everything from simple values to asynchronous network requests. In this guide, we covered installing Riverpod, creating providers, consuming them, and making network requests. Now you’re ready to explore the full power of Riverpod in your Flutter applications!</p>]]></content><author><name></name></author><category term="flutter,"/><category term="riverpod,"/><category term="state,"/><category term="dart"/><summary type="html"><![CDATA[A beginner's guide to state management with Riverpod in Flutter.]]></summary></entry><entry><title type="html">Entity Management with NgRx SignalStore: Streamlining State Management in Angular</title><link href="https://varedisy.github.io/blog/2024/ngrx-store-entities-angular/" rel="alternate" type="text/html" title="Entity Management with NgRx SignalStore: Streamlining State Management in Angular"/><published>2024-08-27T12:00:00+00:00</published><updated>2024-08-27T12:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/ngrx-store-entities-angular</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/ngrx-store-entities-angular/"><![CDATA[<h2 id="introduction-to-entity-management">Introduction to Entity Management</h2> <p>Managing entities efficiently is a crucial aspect of state management in any application. NgRx SignalStore offers an elegant solution for handling entity collections through the <code class="language-plaintext highlighter-rouge">@ngrx/signals/entities</code> plugin. This plugin simplifies the management of entities, allowing you to focus on the logic and features of your Angular application without getting bogged down by the intricacies of state management.</p> <p>If you have never used NgRx SignalStore before, refer to the article <a href="https://varedisy.github.io/blog/2024/ngrx-store-angular/">Getting Started with NgRx SignalStore</a>.</p> <h2 id="using-withentities-feature">Using <code class="language-plaintext highlighter-rouge">withEntities</code> Feature</h2> <p>The <code class="language-plaintext highlighter-rouge">withEntities</code> feature is the cornerstone of entity management in SignalStore. It automatically generates signals that provide access to entity collections, including:</p> <ul> <li><strong>ids</strong>: A signal that returns an array of all entity IDs.</li> <li><strong>entityMap</strong>: A signal that returns a map of entities keyed by their IDs.</li> <li><strong>entities</strong>: A signal that returns an array of all entities, making it easy to work with the entire collection.</li> </ul> <p>Here’s an example of how to define a basic SignalStore with entity management:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">computed</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">signalStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">withEntities</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals/entities</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">text</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">completed</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">TodosStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nx">withEntities</span><span class="o">&lt;</span><span class="nx">Todo</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">);</span>
</code></pre></div></div> <p>This setup gives you access to entity-specific signals, such as <code class="language-plaintext highlighter-rouge">ids</code>, <code class="language-plaintext highlighter-rouge">entityMap</code>, and <code class="language-plaintext highlighter-rouge">entities</code>, which can be used to manage and display entities in your application.</p> <h2 id="leveraging-entity-updaters">Leveraging Entity Updaters</h2> <p>Entity updaters are functions provided by the <code class="language-plaintext highlighter-rouge">@ngrx/signals/entities</code> plugin to manipulate the entity collections within your store. They work seamlessly with the <code class="language-plaintext highlighter-rouge">patchState</code> function to ensure the store is updated predictably.</p> <p>Here’s an example of how to add methods to the <code class="language-plaintext highlighter-rouge">TodosStore</code> for common operations:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">patchState</span><span class="p">,</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withMethods</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">addEntity</span><span class="p">,</span>
  <span class="nx">removeEntities</span><span class="p">,</span>
  <span class="nx">updateAllEntities</span><span class="p">,</span>
  <span class="nx">withEntities</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals/entities</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">text</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">completed</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">TodosStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nx">withEntities</span><span class="o">&lt;</span><span class="nx">Todo</span><span class="o">&gt;</span><span class="p">(),</span>
  <span class="nf">withMethods</span><span class="p">((</span><span class="nx">store</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nf">addTodo</span><span class="p">(</span><span class="na">todo</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">addEntity</span><span class="p">(</span><span class="nx">todo</span><span class="p">));</span>
    <span class="p">},</span>
    <span class="nf">removeEmptyTodos</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">removeEntities</span><span class="p">(({</span> <span class="nx">text</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">text</span><span class="p">));</span>
    <span class="p">},</span>
    <span class="nf">completeAllTodos</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">updateAllEntities</span><span class="p">({</span> <span class="na">completed</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>
    <span class="p">},</span>
  <span class="p">}))</span>
<span class="p">);</span>
</code></pre></div></div> <h2 id="custom-entity-identifiers">Custom Entity Identifiers</h2> <p>If your entities don’t have an <code class="language-plaintext highlighter-rouge">id</code> property, you can use a custom identifier by providing a selector function. This selector will be used whenever you add, update, or remove entities from the store.</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">patchState</span><span class="p">,</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withMethods</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">addEntities</span><span class="p">,</span>
  <span class="nx">removeEntity</span><span class="p">,</span>
  <span class="nx">SelectEntityId</span><span class="p">,</span>
  <span class="nx">setEntity</span><span class="p">,</span>
  <span class="nx">updateAllEntities</span><span class="p">,</span>
  <span class="nx">withEntities</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals/entities</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">key</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">text</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">completed</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">selectId</span><span class="p">:</span> <span class="nx">SelectEntityId</span><span class="o">&lt;</span><span class="nx">Todo</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">key</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">TodosStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nx">withEntities</span><span class="o">&lt;</span><span class="nx">Todo</span><span class="o">&gt;</span><span class="p">(),</span>
  <span class="nf">withMethods</span><span class="p">((</span><span class="nx">store</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nf">addTodos</span><span class="p">(</span><span class="na">todos</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">[]):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">addEntities</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="p">{</span> <span class="nx">selectId</span> <span class="p">}));</span>
    <span class="p">},</span>
    <span class="nf">setTodo</span><span class="p">(</span><span class="na">todo</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">setEntity</span><span class="p">(</span><span class="nx">todo</span><span class="p">,</span> <span class="p">{</span> <span class="nx">selectId</span> <span class="p">}));</span>
    <span class="p">},</span>
    <span class="nf">completeAllTodos</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span>
        <span class="nx">store</span><span class="p">,</span>
        <span class="nf">updateAllEntities</span><span class="p">({</span> <span class="na">completed</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">selectId</span> <span class="p">})</span>
      <span class="p">);</span>
    <span class="p">},</span>
    <span class="nf">removeTodo</span><span class="p">(</span><span class="na">key</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">removeEntity</span><span class="p">(</span><span class="nx">key</span><span class="p">));</span>
    <span class="p">},</span>
  <span class="p">}))</span>
<span class="p">);</span>
</code></pre></div></div> <h2 id="named-entity-collections">Named Entity Collections</h2> <p>The <code class="language-plaintext highlighter-rouge">withEntities</code> feature allows for managing multiple entity collections within a single store by specifying a custom prefix for each collection. This is particularly useful when dealing with related data types.</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="kd">type</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">withEntities</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals/entities</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Book</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">authorId</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">type</span> <span class="nx">Author</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">LibraryStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withEntities</span><span class="p">({</span> <span class="na">entity</span><span class="p">:</span> <span class="kd">type</span><span class="o">&lt;</span><span class="nx">Book</span><span class="o">&gt;</span><span class="p">(),</span> <span class="na">collection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">book</span><span class="dl">'</span> <span class="p">}),</span>
  <span class="nf">withEntities</span><span class="p">({</span> <span class="na">entity</span><span class="p">:</span> <span class="kd">type</span><span class="o">&lt;</span><span class="nx">Author</span><span class="o">&gt;</span><span class="p">(),</span> <span class="na">collection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">author</span><span class="dl">'</span> <span class="p">}),</span>
  <span class="nf">withMethods</span><span class="p">((</span><span class="nx">store</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nf">addBook</span><span class="p">(</span><span class="na">book</span><span class="p">:</span> <span class="nx">Book</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">addEntity</span><span class="p">(</span><span class="nx">book</span><span class="p">,</span> <span class="p">{</span> <span class="na">collection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">book</span><span class="dl">'</span> <span class="p">}));</span>
    <span class="p">},</span>
    <span class="nf">addAuthor</span><span class="p">(</span><span class="na">author</span><span class="p">:</span> <span class="nx">Author</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nf">addEntity</span><span class="p">(</span><span class="nx">author</span><span class="p">,</span> <span class="p">{</span> <span class="na">collection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">author</span><span class="dl">'</span> <span class="p">}));</span>
    <span class="p">},</span>
  <span class="p">}))</span>
<span class="p">);</span>
</code></pre></div></div> <p>This approach allows you to maintain multiple collections within a single store while keeping their states isolated and manageable.</p>]]></content><author><name></name></author><category term="angular"/><category term="angular,"/><category term="ngrx,"/><category term="state"/><summary type="html"><![CDATA[Learn how to efficiently manage entity collections in Angular using NgRx SignalStore.]]></summary></entry><entry><title type="html">Understanding Structs in Go: A Beginner’s Guide</title><link href="https://varedisy.github.io/blog/2024/structs-golang/" rel="alternate" type="text/html" title="Understanding Structs in Go: A Beginner’s Guide"/><published>2024-08-27T12:00:00+00:00</published><updated>2024-08-27T12:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/structs-golang</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/structs-golang/"><![CDATA[<h2 id="what-is-a-struct">What is a Struct?</h2> <p>In Go, a struct is a composite data type that groups together variables under a single name. These variables, known as <strong>fields</strong>, can have different types and are used to represent data more complex than a single primitive type. Structs are the closest thing Go has to classes in object-oriented languages.</p> <p>Structs provide a way to create more complex data structures that mirror real-world entities. For example, if you were writing an application to manage a library, you could define a struct to represent a book, with fields for the title, author, and publication year.</p> <h2 id="defining-a-struct">Defining a Struct</h2> <p>To define a struct in Go, use the <code class="language-plaintext highlighter-rouge">type</code> keyword followed by the name of the struct and the <code class="language-plaintext highlighter-rouge">struct</code> keyword. Inside the curly braces <code class="language-plaintext highlighter-rouge">{}</code>, list the fields along with their types. Here’s an example:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="c">// Defining a struct named Book</span>
<span class="k">type</span> <span class="n">Book</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Title</span>  <span class="kt">string</span>
    <span class="n">Author</span> <span class="kt">string</span>
    <span class="n">Pages</span>  <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// Using the struct in the main function</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Structs in Go"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, <code class="language-plaintext highlighter-rouge">Book</code> is a struct with three fields: <code class="language-plaintext highlighter-rouge">Title</code> (a string), <code class="language-plaintext highlighter-rouge">Author</code> (a string), and <code class="language-plaintext highlighter-rouge">Pages</code> (an integer).</p> <h2 id="initializing-structs">Initializing Structs</h2> <p>Once you have defined a struct, you can create instances of it in several ways.</p> <h3 id="using-a-literal">Using a Literal</h3> <p>You can create and initialize a struct in a single step using a struct literal:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">type</span> <span class="n">Book</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Title</span>  <span class="kt">string</span>
    <span class="n">Author</span> <span class="kt">string</span>
    <span class="n">Pages</span>  <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// Initializing a struct using a literal</span>
    <span class="n">myBook</span> <span class="o">:=</span> <span class="n">Book</span><span class="p">{</span>
        <span class="n">Title</span><span class="o">:</span>  <span class="s">"The Go Programming Language"</span><span class="p">,</span>
        <span class="n">Author</span><span class="o">:</span> <span class="s">"Alan Donovan"</span><span class="p">,</span>
        <span class="n">Pages</span><span class="o">:</span>  <span class="m">380</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">myBook</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>This creates a <code class="language-plaintext highlighter-rouge">Book</code> instance called <code class="language-plaintext highlighter-rouge">myBook</code> with the specified values.</p> <h3 id="using-the-new-keyword">Using the <code class="language-plaintext highlighter-rouge">new</code> Keyword</h3> <p>Alternatively, you can create a pointer to a struct using the <code class="language-plaintext highlighter-rouge">new</code> keyword:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">type</span> <span class="n">Book</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Title</span>  <span class="kt">string</span>
    <span class="n">Author</span> <span class="kt">string</span>
    <span class="n">Pages</span>  <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// Creating a pointer to a struct</span>
    <span class="n">myBook</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="n">Book</span><span class="p">)</span>
    <span class="n">myBook</span><span class="o">.</span><span class="n">Title</span> <span class="o">=</span> <span class="s">"The Go Programming Language"</span>
    <span class="n">myBook</span><span class="o">.</span><span class="n">Author</span> <span class="o">=</span> <span class="s">"Alan Donovan"</span>
    <span class="n">myBook</span><span class="o">.</span><span class="n">Pages</span> <span class="o">=</span> <span class="m">380</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">*</span><span class="n">myBook</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>This approach is useful when you want to work with pointers.</p> <h2 id="accessing-and-modifying-struct-fields">Accessing and Modifying Struct Fields</h2> <p>Once you have a struct instance, you can access and modify its fields using the dot <code class="language-plaintext highlighter-rouge">.</code> notation:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">type</span> <span class="n">Book</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Title</span>  <span class="kt">string</span>
    <span class="n">Author</span> <span class="kt">string</span>
    <span class="n">Pages</span>  <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">myBook</span> <span class="o">:=</span> <span class="n">Book</span><span class="p">{</span>
        <span class="n">Title</span><span class="o">:</span>  <span class="s">"The Go Programming Language"</span><span class="p">,</span>
        <span class="n">Author</span><span class="o">:</span> <span class="s">"Alan Donovan"</span><span class="p">,</span>
        <span class="n">Pages</span><span class="o">:</span>  <span class="m">380</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="c">// Accessing fields</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Title:"</span><span class="p">,</span> <span class="n">myBook</span><span class="o">.</span><span class="n">Title</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Author:"</span><span class="p">,</span> <span class="n">myBook</span><span class="o">.</span><span class="n">Author</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Pages:"</span><span class="p">,</span> <span class="n">myBook</span><span class="o">.</span><span class="n">Pages</span><span class="p">)</span>

    <span class="c">// Modifying fields</span>
    <span class="n">myBook</span><span class="o">.</span><span class="n">Pages</span> <span class="o">=</span> <span class="m">400</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Updated Pages:"</span><span class="p">,</span> <span class="n">myBook</span><span class="o">.</span><span class="n">Pages</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here, the <code class="language-plaintext highlighter-rouge">Title</code>, <code class="language-plaintext highlighter-rouge">Author</code>, and <code class="language-plaintext highlighter-rouge">Pages</code> fields of the <code class="language-plaintext highlighter-rouge">myBook</code> instance are accessed and modified.</p> <h2 id="embedding-and-inheritance-with-structs">Embedding and Inheritance with Structs</h2> <p>Go doesn’t have traditional inheritance like some other languages, but it does allow for composition through struct embedding. You can embed one struct within another, allowing the embedded struct’s fields and methods to be accessed directly from the outer struct.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="c">// Define a basic struct</span>
<span class="k">type</span> <span class="n">Person</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Name</span> <span class="kt">string</span>
    <span class="n">Age</span>  <span class="kt">int</span>
<span class="p">}</span>

<span class="c">// Embedding Person struct in Author struct</span>
<span class="k">type</span> <span class="n">Author</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Person</span>
    <span class="n">BooksPublished</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">author</span> <span class="o">:=</span> <span class="n">Author</span><span class="p">{</span>
        <span class="n">Person</span><span class="o">:</span> <span class="n">Person</span><span class="p">{</span>
            <span class="n">Name</span><span class="o">:</span> <span class="s">"Alan Donovan"</span><span class="p">,</span>
            <span class="n">Age</span><span class="o">:</span>  <span class="m">45</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="n">BooksPublished</span><span class="o">:</span> <span class="m">5</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="c">// Accessing embedded struct's fields</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Author Name:"</span><span class="p">,</span> <span class="n">author</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Author Age:"</span><span class="p">,</span> <span class="n">author</span><span class="o">.</span><span class="n">Age</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Books Published:"</span><span class="p">,</span> <span class="n">author</span><span class="o">.</span><span class="n">BooksPublished</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, the <code class="language-plaintext highlighter-rouge">Author</code> struct embeds the <code class="language-plaintext highlighter-rouge">Person</code> struct, and you can access the <code class="language-plaintext highlighter-rouge">Name</code> and <code class="language-plaintext highlighter-rouge">Age</code> fields directly on an <code class="language-plaintext highlighter-rouge">Author</code> instance.</p> <p>Here’s the final section of the article focused on methods, including passing by value and by reference:</p> <h2 id="methods-on-structs-pass-by-value-vs-pass-by-reference">Methods on Structs: Pass by Value vs. Pass by Reference</h2> <p>In Go, you can define methods on structs to associate behaviors with the data they encapsulate. These methods can either receive a copy of the struct (pass by value) or a reference to the struct (pass by reference). Understanding the difference between these two approaches is essential for writing efficient and bug-free Go code.</p> <h3 id="pass-by-value">Pass by Value</h3> <p>When a method is defined with a value receiver, the method operates on a copy of the struct. Any modifications made within the method do not affect the original struct.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">type</span> <span class="n">Rectangle</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Width</span>  <span class="kt">int</span>
    <span class="n">Height</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="c">// Method with a value receiver</span>
<span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="n">Rectangle</span><span class="p">)</span> <span class="n">Area</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">Width</span> <span class="o">*</span> <span class="n">r</span><span class="o">.</span><span class="n">Height</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="n">Rectangle</span><span class="p">)</span> <span class="n">Scale</span><span class="p">(</span><span class="n">factor</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">r</span><span class="o">.</span><span class="n">Width</span> <span class="o">*=</span> <span class="n">factor</span>
    <span class="n">r</span><span class="o">.</span><span class="n">Height</span> <span class="o">*=</span> <span class="n">factor</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">rect</span> <span class="o">:=</span> <span class="n">Rectangle</span><span class="p">{</span><span class="n">Width</span><span class="o">:</span> <span class="m">10</span><span class="p">,</span> <span class="n">Height</span><span class="o">:</span> <span class="m">5</span><span class="p">}</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Area:"</span><span class="p">,</span> <span class="n">rect</span><span class="o">.</span><span class="n">Area</span><span class="p">())</span> <span class="c">// Outputs: Area: 50</span>

    <span class="n">rect</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Scaled Width:"</span><span class="p">,</span> <span class="n">rect</span><span class="o">.</span><span class="n">Width</span><span class="p">)</span>  <span class="c">// Outputs: Scaled Width: 10</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Scaled Height:"</span><span class="p">,</span> <span class="n">rect</span><span class="o">.</span><span class="n">Height</span><span class="p">)</span> <span class="c">// Outputs: Scaled Height: 5</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, calling <code class="language-plaintext highlighter-rouge">rect.Scale(2)</code> does not change the <code class="language-plaintext highlighter-rouge">Width</code> or <code class="language-plaintext highlighter-rouge">Height</code> of <code class="language-plaintext highlighter-rouge">rect</code> because the method operates on a copy of the struct. The original struct remains unchanged.</p> <h3 id="pass-by-reference">Pass by Reference</h3> <p>To modify the original struct within a method, you can use a pointer receiver. This approach allows the method to operate directly on the struct’s memory address, enabling it to make changes that persist outside the method scope.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">type</span> <span class="n">Rectangle</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Width</span>  <span class="kt">int</span>
    <span class="n">Height</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="c">// Method with a pointer receiver</span>
<span class="k">func</span> <span class="p">(</span><span class="n">r</span> <span class="o">*</span><span class="n">Rectangle</span><span class="p">)</span> <span class="n">Scale</span><span class="p">(</span><span class="n">factor</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">r</span><span class="o">.</span><span class="n">Width</span> <span class="o">*=</span> <span class="n">factor</span>
    <span class="n">r</span><span class="o">.</span><span class="n">Height</span> <span class="o">*=</span> <span class="n">factor</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">rect</span> <span class="o">:=</span> <span class="n">Rectangle</span><span class="p">{</span><span class="n">Width</span><span class="o">:</span> <span class="m">10</span><span class="p">,</span> <span class="n">Height</span><span class="o">:</span> <span class="m">5</span><span class="p">}</span>
    <span class="n">rect</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Scaled Width:"</span><span class="p">,</span> <span class="n">rect</span><span class="o">.</span><span class="n">Width</span><span class="p">)</span>  <span class="c">// Outputs: Scaled Width: 20</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Scaled Height:"</span><span class="p">,</span> <span class="n">rect</span><span class="o">.</span><span class="n">Height</span><span class="p">)</span> <span class="c">// Outputs: Scaled Height: 10</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">Scale</code> is defined with a pointer receiver <code class="language-plaintext highlighter-rouge">*Rectangle</code>, allowing it to modify the original <code class="language-plaintext highlighter-rouge">rect</code> struct. After scaling, the <code class="language-plaintext highlighter-rouge">Width</code> and <code class="language-plaintext highlighter-rouge">Height</code> values are updated as expected.</p> <h3 id="choosing-between-pass-by-value-and-pass-by-reference">Choosing Between Pass by Value and Pass by Reference</h3> <ul> <li> <p><strong>Pass by Value</strong>: Use this when the method does not need to modify the original struct. It can be more efficient when working with small structs, as copying a small amount of data is generally inexpensive.</p> </li> <li> <p><strong>Pass by Reference</strong>: Use this when the method needs to alter the struct’s data. It is more efficient for larger structs because it avoids copying the entire struct, which can be costly in terms of performance.</p> </li> </ul> <p>Understanding when to use each approach allows you to write clearer, more efficient Go code that behaves as intended.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

## Conclusion

Structs are a fundamental part of Go's type system and are essential for creating more complex and meaningful data structures. By understanding how to define, initialize, and manipulate structs, as well as how to use methods and embedding, you can write more organized and maintainable Go code.

Start experimenting with structs in your projects, and you'll see how they can help you manage and structure your data more effectively.
</code></pre></div></div>]]></content><author><name></name></author><category term="golang"/><category term="golang,"/><category term="structs"/><summary type="html"><![CDATA[Learn the basics of structs in Go and how to use them effectively in your programs.]]></summary></entry><entry><title type="html">Getting Started with NgRx SignalStore</title><link href="https://varedisy.github.io/blog/2024/ngrx-store-angular/" rel="alternate" type="text/html" title="Getting Started with NgRx SignalStore"/><published>2024-08-22T12:00:00+00:00</published><updated>2024-08-22T12:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/ngrx-store-angular</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/ngrx-store-angular/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>NgRx SignalStore is a powerful state management solution for Angular applications. It leverages Signals to create stores in a clear, declarative manner, providing flexibility and ease of use.</p> <p>In this guide, we’ll explore how to create and use SignalStores, manage state and define computed signals and methods.</p> <h2 id="prerequisites">Prerequisites</h2> <ul> <li> <p><strong>Install NgRx Signals:</strong></p> <p>Run the following command to install the core NgRx signals libraries:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng add @ngrx/signals@latest
</code></pre></div> </div> </li> </ul> <h2 id="creating-a-store">Creating a Store</h2> <p>A SignalStore is created using the <code class="language-plaintext highlighter-rouge">signalStore</code> function, which takes a series of store features as arguments. This allows the SignalStore to manage state, computed signals, and methods, making the implementation flexible and extensible. Depending on the features used, <code class="language-plaintext highlighter-rouge">signalStore</code> returns an injectable service that can be provided and injected wherever needed.</p> <p>To add state slices to a SignalStore, use the <code class="language-plaintext highlighter-rouge">withState</code> feature. This feature accepts the initial state, which must be an object literal.</p> <p>Here’s an example:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Book</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./book.model</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">BooksState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">books</span><span class="p">:</span> <span class="nx">Book</span><span class="p">[];</span>
  <span class="nl">isLoading</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
  <span class="nl">filter</span><span class="p">:</span> <span class="p">{</span> <span class="na">query</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="nl">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">desc</span><span class="dl">'</span> <span class="p">};</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">initialState</span><span class="p">:</span> <span class="nx">BooksState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">books</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">isLoading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="na">query</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">)</span>
<span class="p">);</span>


</code></pre></div></div> <p>In this example, the <code class="language-plaintext highlighter-rouge">BooksStore</code> instance will automatically generate signals for each state slice, including nested properties.</p> <h2 id="providing-and-injecting-the-store">Providing and Injecting the Store</h2> <p>SignalStore can be provided either locally or globally. By default, a SignalStore is not registered with any injector, so it needs to be included in a providers array at the component, route, or root level.</p> <p>Here’s an example of providing <code class="language-plaintext highlighter-rouge">BooksStore</code> at the component level:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">inject</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BooksStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./books.store</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">BooksStore</span><span class="p">],</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nc">BooksComponent</span> <span class="p">{</span>
  <span class="k">readonly</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">inject</span><span class="p">(</span><span class="nx">BooksStore</span><span class="p">);</span>
<span class="p">}</span>


</code></pre></div></div> <p>When provided at the component level, the store is tied to the component’s lifecycle, making it ideal for managing component-specific state. Alternatively, you can register a SignalStore globally by setting the <code class="language-plaintext highlighter-rouge">providedIn</code> property to <code class="language-plaintext highlighter-rouge">'root'</code>:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="p">{</span> <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span> <span class="p">},</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">)</span>
<span class="p">);</span>


</code></pre></div></div> <h2 id="reading-state">Reading State</h2> <p>Signals generated for state slices can be used to access state values:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ChangeDetectionStrategy</span><span class="p">,</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">inject</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">JsonPipe</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/common</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BooksStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./books.store</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">standalone</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span><span class="nx">JsonPipe</span><span class="p">],</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`
    &lt;p&gt;Books: {{ store.books() | json }}&lt;/p&gt;
    &lt;p&gt;Loading: {{ store.isLoading() }}&lt;/p&gt;
    &lt;p&gt;Pagination: {{ store.filter() | json }}&lt;/p&gt;
    &lt;p&gt;Query: {{ store.filter.query() }}&lt;/p&gt;
    &lt;p&gt;Order: {{ store.filter.order() }}&lt;/p&gt;
  `</span><span class="p">,</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">BooksStore</span><span class="p">],</span>
  <span class="na">changeDetection</span><span class="p">:</span> <span class="nx">ChangeDetectionStrategy</span><span class="p">.</span><span class="nx">OnPush</span><span class="p">,</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nc">BooksComponent</span> <span class="p">{</span>
  <span class="k">readonly</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">inject</span><span class="p">(</span><span class="nx">BooksStore</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="defining-computed-signals">Defining Computed Signals</h2> <p>You can add computed signals to the store using the <code class="language-plaintext highlighter-rouge">withComputed</code> feature, which takes a factory function that returns a dictionary of computed signals:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">computed</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withComputed</span><span class="p">,</span> <span class="nx">withState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Book</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./book.model</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">),</span>
  <span class="nf">withComputed</span><span class="p">(({</span> <span class="nx">books</span><span class="p">,</span> <span class="nx">filter</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">booksCount</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">books</span><span class="p">().</span><span class="nx">length</span><span class="p">),</span>
    <span class="na">sortedBooks</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">direction</span> <span class="o">=</span> <span class="nx">filter</span><span class="p">.</span><span class="nf">order</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="k">return</span> <span class="nf">books</span><span class="p">().</span><span class="nf">toSorted</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">direction</span> <span class="o">*</span> <span class="nx">a</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nf">localeCompare</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span>
      <span class="p">);</span>
    <span class="p">}),</span>
  <span class="p">}))</span>
<span class="p">);</span>


</code></pre></div></div> <h2 id="defining-store-methods">Defining Store Methods</h2> <p>Methods can be added to the store using the <code class="language-plaintext highlighter-rouge">withMethods</code> feature, which takes a factory function that returns a dictionary of methods:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">patchState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">),</span>
  <span class="nf">withComputed</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">),</span>
  <span class="nf">withMethods</span><span class="p">((</span><span class="nx">store</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nf">updateQuery</span><span class="p">(</span><span class="na">query</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">query</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>
    <span class="nf">updateOrder</span><span class="p">(</span><span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">desc</span><span class="dl">'</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">order</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>
  <span class="p">}))</span>
<span class="p">);</span>


</code></pre></div></div> <p>State updates are performed using the <code class="language-plaintext highlighter-rouge">patchState</code> function. This function ensures that the state is protected from external modifications unless explicitly configured otherwise.</p> <h2 id="putting-it-all-together">Putting It All Together</h2> <p>Here’s the complete implementation of <code class="language-plaintext highlighter-rouge">BooksStore</code>, integrating state, computed signals, and methods:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">patchState</span><span class="p">,</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withComputed</span><span class="p">,</span> <span class="nx">withMethods</span><span class="p">,</span> <span class="nx">withState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Book</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./book.model</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BooksService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./books.service</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">),</span>
  <span class="nf">withComputed</span><span class="p">(({</span> <span class="nx">books</span><span class="p">,</span> <span class="nx">filter</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">booksCount</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">books</span><span class="p">().</span><span class="nx">length</span><span class="p">),</span>
    <span class="na">sortedBooks</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">direction</span> <span class="o">=</span> <span class="nx">filter</span><span class="p">.</span><span class="nf">order</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="k">return</span> <span class="nf">books</span><span class="p">().</span><span class="nf">toSorted</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">direction</span> <span class="o">*</span> <span class="nx">a</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nf">localeCompare</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span>
      <span class="p">);</span>
    <span class="p">}),</span>
  <span class="p">})),</span>
  <span class="nf">withMethods</span><span class="p">((</span><span class="nx">store</span><span class="p">,</span> <span class="nx">booksService</span> <span class="o">=</span> <span class="nf">inject</span><span class="p">(</span><span class="nx">BooksService</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nf">updateQuery</span><span class="p">(</span><span class="na">query</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">query</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>
    <span class="nf">updateOrder</span><span class="p">(</span><span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">desc</span><span class="dl">'</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">order</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>

  <span class="p">}))</span>
<span class="p">);</span>


</code></pre></div></div> <h2 id="managing-entities">Managing Entities</h2> <p>To learn how to manage entities in the ngrx signal store, check out our <a href="https://varedisy.github.io/blog/2024/ngrx-store-entities-angular/">Entity Management with NgRx SignalStore: Streamlining State Management in Angular</a>.</p> <hr/> <p>This comprehensive setup makes the <code class="language-plaintext highlighter-rouge">BooksStore</code> a powerful tool for managing application state in Angular, with the added benefit of seamless integration with RxJS for handling more complex, asynchronous tasks.</p>]]></content><author><name></name></author><category term="angular"/><category term="angular,"/><category term="ngrx,"/><category term="state"/><summary type="html"><![CDATA[Explore how NgRx SignalStore simplifies state management in Angular with its native support for Signals, and learn how to create, provide, and use SignalStores effectively.]]></summary></entry><entry><title type="html">Understanding For Loops in Go</title><link href="https://varedisy.github.io/blog/2024/for-loops-golang/" rel="alternate" type="text/html" title="Understanding For Loops in Go"/><published>2024-08-22T10:00:00+00:00</published><updated>2024-08-22T10:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/for-loops-golang</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/for-loops-golang/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Go (or Golang) is a statically typed, compiled programming language known for its simplicity and efficiency. One of the fundamental control structures in Go is the <code class="language-plaintext highlighter-rouge">for</code> loop. Unlike many other languages that have different types of loops, Go uses a single <code class="language-plaintext highlighter-rouge">for</code> loop construct that can be adapted to various looping needs.</p> <p>Here’s a detailed overview of how to use <code class="language-plaintext highlighter-rouge">for</code> loops in Go, with examples.</p> <h2 id="basic-for-loop">Basic For Loop</h2> <p>The most basic form of the <code class="language-plaintext highlighter-rouge">for</code> loop in Go is the classic initialization, condition, and post statement loop. Here’s a simple example that prints numbers from 1 to 5:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="m">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example:</p> <ul> <li><code class="language-plaintext highlighter-rouge">i := 1</code> initializes the loop variable <code class="language-plaintext highlighter-rouge">i</code>.</li> <li><code class="language-plaintext highlighter-rouge">i &lt;= 5</code> is the condition that must be true for the loop to continue.</li> <li><code class="language-plaintext highlighter-rouge">i++</code> increments the variable <code class="language-plaintext highlighter-rouge">i</code> after each iteration.</li> </ul> <h2 id="for-loop-as-a-while-loop">For Loop as a While Loop</h2> <p>Go does not have a <code class="language-plaintext highlighter-rouge">while</code> loop, but you can achieve similar functionality using the <code class="language-plaintext highlighter-rouge">for</code> loop by omitting the initialization and post statements:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="m">5</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">i</span><span class="o">++</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, the loop will continue as long as <code class="language-plaintext highlighter-rouge">i &lt;= 5</code>, similar to how a <code class="language-plaintext highlighter-rouge">while</code> loop would work in other languages.</p> <h2 id="infinite-for-loop">Infinite For Loop</h2> <p>You can create an infinite loop by omitting the condition altogether:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"This will print indefinitely"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>To exit an infinite loop, you would typically use the <code class="language-plaintext highlighter-rouge">break</code> statement.</p> <h2 id="for-loop-with-range">For Loop with Range</h2> <p>Go’s <code class="language-plaintext highlighter-rouge">for</code> loop can also be used with the <code class="language-plaintext highlighter-rouge">range</code> keyword to iterate over slices, arrays, maps, and other data structures. Here’s an example with a slice:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">40</span><span class="p">,</span> <span class="m">50</span><span class="p">}</span>
    
    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">numbers</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Index: %d, Value: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example:</p> <ul> <li><code class="language-plaintext highlighter-rouge">index</code> is the index of the current element.</li> <li><code class="language-plaintext highlighter-rouge">value</code> is the value of the current element.</li> </ul> <h2 id="for-loop-in-a-nested-structure">For Loop in a Nested Structure</h2> <p>You can also nest <code class="language-plaintext highlighter-rouge">for</code> loops within each other. Here’s an example that creates a multiplication table:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="m">10</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%4d"</span><span class="p">,</span> <span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, the outer loop iterates through rows and the inner loop iterates through columns, printing a multiplication table.</p> <h2 id="summary">Summary</h2> <p>The <code class="language-plaintext highlighter-rouge">for</code> loop in Go is versatile and can be used in various ways to achieve different looping constructs. Whether you need a basic iteration, a <code class="language-plaintext highlighter-rouge">while</code>-like loop, or an infinite loop, Go’s <code class="language-plaintext highlighter-rouge">for</code> loop can handle it all. It also seamlessly integrates with Go’s <code class="language-plaintext highlighter-rouge">range</code> keyword for iterating over collections.</p> <p>Experiment with these different forms of <code class="language-plaintext highlighter-rouge">for</code> loops to understand their usage and see how they fit into your Go programs. Happy coding!</p> <hr/> <p>For more information on Go loops and other Go features, check out the <a href="https://golang.org/doc/effective_go#for">official Go documentation</a>.</p>]]></content><author><name></name></author><category term="golang"/><category term="loops"/><summary type="html"><![CDATA[An in-depth look at how to use for loops in the Go programming language]]></summary></entry></feed>