<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://varedisy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://varedisy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-23T10:32:33+00:00</updated><id>https://varedisy.github.io/feed.xml</id><title type="html">not_on_stack</title><entry><title type="html">Comprehensive Guide to NgRx SignalStore for State Management in Angular</title><link href="https://varedisy.github.io/blog/2024/ngrx-store-angular/" rel="alternate" type="text/html" title="Comprehensive Guide to NgRx SignalStore for State Management in Angular"/><published>2024-08-22T12:00:00+00:00</published><updated>2024-08-22T12:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/ngrx-store-angular</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/ngrx-store-angular/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>NgRx SignalStore is a powerful state management solution for Angular applications. It leverages Signals to create stores in a clear, declarative manner, providing flexibility and ease of use. SignalStore’s opinionated and extensible design makes it an excellent choice for managing both local and global state in Angular applications.</p> <p>In this guide, we’ll explore how to create and use SignalStores, manage state, define computed signals and methods, and integrate with RxJS for reactive programming.</p> <h2 id="prerequisites">Prerequisites</h2> <ul> <li> <p><strong>Install NgRx Store and Effects:</strong></p> <p>Run the following command to install the core NgRx libraries:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng add @ngrx/store @ngrx/effects @ngrx/entity 
</code></pre></div> </div> </li> </ul> <h2 id="creating-a-store">Creating a Store</h2> <p>A SignalStore is created using the <code class="language-plaintext highlighter-rouge">signalStore</code> function, which takes a series of store features as arguments. This allows the SignalStore to manage state, computed signals, and methods, making the implementation flexible and extensible. Depending on the features used, <code class="language-plaintext highlighter-rouge">signalStore</code> returns an injectable service that can be provided and injected wherever needed.</p> <p>To add state slices to a SignalStore, use the <code class="language-plaintext highlighter-rouge">withState</code> feature. This feature accepts the initial state, which must be an object literal.</p> <p>Here’s an example:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Book</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./book.model</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">BooksState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">books</span><span class="p">:</span> <span class="nx">Book</span><span class="p">[];</span>
  <span class="nl">isLoading</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
  <span class="nl">filter</span><span class="p">:</span> <span class="p">{</span> <span class="na">query</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="nl">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">desc</span><span class="dl">'</span> <span class="p">};</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">initialState</span><span class="p">:</span> <span class="nx">BooksState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">books</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">isLoading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="na">query</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">)</span>
<span class="p">);</span>


</code></pre></div></div> <p>In this example, the <code class="language-plaintext highlighter-rouge">BooksStore</code> instance will automatically generate signals for each state slice, including nested properties.</p> <h2 id="providing-and-injecting-the-store">Providing and Injecting the Store</h2> <p>SignalStore can be provided either locally or globally. By default, a SignalStore is not registered with any injector, so it needs to be included in a providers array at the component, route, or root level.</p> <p>Here’s an example of providing <code class="language-plaintext highlighter-rouge">BooksStore</code> at the component level:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">inject</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BooksStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./books.store</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">BooksStore</span><span class="p">],</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nc">BooksComponent</span> <span class="p">{</span>
  <span class="k">readonly</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">inject</span><span class="p">(</span><span class="nx">BooksStore</span><span class="p">);</span>
<span class="p">}</span>


</code></pre></div></div> <p>When provided at the component level, the store is tied to the component’s lifecycle, making it ideal for managing component-specific state. Alternatively, you can register a SignalStore globally by setting the <code class="language-plaintext highlighter-rouge">providedIn</code> property to <code class="language-plaintext highlighter-rouge">'root'</code>:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="p">{</span> <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span> <span class="p">},</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">)</span>
<span class="p">);</span>


</code></pre></div></div> <h2 id="reading-state">Reading State</h2> <p>Signals generated for state slices can be used to access state values:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ChangeDetectionStrategy</span><span class="p">,</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">inject</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">JsonPipe</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/common</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BooksStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./books.store</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">standalone</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span><span class="nx">JsonPipe</span><span class="p">],</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`
    &lt;p&gt;Books: {{ store.books() | json }}&lt;/p&gt;
    &lt;p&gt;Loading: {{ store.isLoading() }}&lt;/p&gt;
    &lt;p&gt;Pagination: {{ store.filter() | json }}&lt;/p&gt;
    &lt;p&gt;Query: {{ store.filter.query() }}&lt;/p&gt;
    &lt;p&gt;Order: {{ store.filter.order() }}&lt;/p&gt;
  `</span><span class="p">,</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">BooksStore</span><span class="p">],</span>
  <span class="na">changeDetection</span><span class="p">:</span> <span class="nx">ChangeDetectionStrategy</span><span class="p">.</span><span class="nx">OnPush</span><span class="p">,</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nc">BooksComponent</span> <span class="p">{</span>
  <span class="k">readonly</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">inject</span><span class="p">(</span><span class="nx">BooksStore</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="defining-computed-signals">Defining Computed Signals</h2> <p>You can add computed signals to the store using the <code class="language-plaintext highlighter-rouge">withComputed</code> feature, which takes a factory function that returns a dictionary of computed signals:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">computed</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withComputed</span><span class="p">,</span> <span class="nx">withState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Book</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./book.model</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">),</span>
  <span class="nf">withComputed</span><span class="p">(({</span> <span class="nx">books</span><span class="p">,</span> <span class="nx">filter</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">booksCount</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">books</span><span class="p">().</span><span class="nx">length</span><span class="p">),</span>
    <span class="na">sortedBooks</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">direction</span> <span class="o">=</span> <span class="nx">filter</span><span class="p">.</span><span class="nf">order</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="k">return</span> <span class="nf">books</span><span class="p">().</span><span class="nf">toSorted</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">direction</span> <span class="o">*</span> <span class="nx">a</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nf">localeCompare</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span>
      <span class="p">);</span>
    <span class="p">}),</span>
  <span class="p">}))</span>
<span class="p">);</span>


</code></pre></div></div> <h2 id="defining-store-methods">Defining Store Methods</h2> <p>Methods can be added to the store using the <code class="language-plaintext highlighter-rouge">withMethods</code> feature, which takes a factory function that returns a dictionary of methods:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">import</span> <span class="p">{</span> <span class="nx">patchState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">),</span>
  <span class="nf">withComputed</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">),</span>
  <span class="nf">withMethods</span><span class="p">((</span><span class="nx">store</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nf">updateQuery</span><span class="p">(</span><span class="na">query</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">query</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>
    <span class="nf">updateOrder</span><span class="p">(</span><span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">desc</span><span class="dl">'</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">order</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>
  <span class="p">}))</span>
<span class="p">);</span>


</code></pre></div></div> <p>State updates are performed using the <code class="language-plaintext highlighter-rouge">patchState</code> function. This function ensures that the state is protected from external modifications unless explicitly configured otherwise.</p> <h2 id="putting-it-all-together">Putting It All Together</h2> <p>Here’s the complete implementation of <code class="language-plaintext highlighter-rouge">BooksStore</code>, integrating state, computed signals, and methods:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">patchState</span><span class="p">,</span> <span class="nx">signalStore</span><span class="p">,</span> <span class="nx">withComputed</span><span class="p">,</span> <span class="nx">withMethods</span><span class="p">,</span> <span class="nx">withState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/signals</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Book</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./book.model</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BooksService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./books.service</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BooksStore</span> <span class="o">=</span> <span class="nf">signalStore</span><span class="p">(</span>
  <span class="nf">withState</span><span class="p">(</span><span class="nx">initialState</span><span class="p">),</span>
  <span class="nf">withComputed</span><span class="p">(({</span> <span class="nx">books</span><span class="p">,</span> <span class="nx">filter</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">booksCount</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">books</span><span class="p">().</span><span class="nx">length</span><span class="p">),</span>
    <span class="na">sortedBooks</span><span class="p">:</span> <span class="nf">computed</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">direction</span> <span class="o">=</span> <span class="nx">filter</span><span class="p">.</span><span class="nf">order</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="k">return</span> <span class="nf">books</span><span class="p">().</span><span class="nf">toSorted</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">direction</span> <span class="o">*</span> <span class="nx">a</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nf">localeCompare</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span>
      <span class="p">);</span>
    <span class="p">}),</span>
  <span class="p">})),</span>
  <span class="nf">withMethods</span><span class="p">((</span><span class="nx">store</span><span class="p">,</span> <span class="nx">booksService</span> <span class="o">=</span> <span class="nf">inject</span><span class="p">(</span><span class="nx">BooksService</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nf">updateQuery</span><span class="p">(</span><span class="na">query</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">query</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>
    <span class="nf">updateOrder</span><span class="p">(</span><span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">desc</span><span class="dl">'</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="nf">patchState</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">order</span> <span class="p">}</span> <span class="p">}));</span>
    <span class="p">},</span>

  <span class="p">}))</span>
<span class="p">);</span>


</code></pre></div></div> <hr/> <p>This comprehensive setup makes the <code class="language-plaintext highlighter-rouge">BooksStore</code> a powerful tool for managing application state in Angular, with the added benefit of seamless integration with RxJS for handling more complex, asynchronous tasks.</p>]]></content><author><name></name></author><category term="angular"/><category term="angular,"/><category term="ngrx,"/><category term="state"/><summary type="html"><![CDATA[Explore how NgRx SignalStore simplifies state management in Angular with its native support for Signals, and learn how to create, provide, and use SignalStores effectively.]]></summary></entry><entry><title type="html">Understanding For Loops in Go</title><link href="https://varedisy.github.io/blog/2024/for-loops-golang/" rel="alternate" type="text/html" title="Understanding For Loops in Go"/><published>2024-08-22T10:00:00+00:00</published><updated>2024-08-22T10:00:00+00:00</updated><id>https://varedisy.github.io/blog/2024/for-loops-golang</id><content type="html" xml:base="https://varedisy.github.io/blog/2024/for-loops-golang/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Go (or Golang) is a statically typed, compiled programming language known for its simplicity and efficiency. One of the fundamental control structures in Go is the <code class="language-plaintext highlighter-rouge">for</code> loop. Unlike many other languages that have different types of loops, Go uses a single <code class="language-plaintext highlighter-rouge">for</code> loop construct that can be adapted to various looping needs.</p> <p>Here’s a detailed overview of how to use <code class="language-plaintext highlighter-rouge">for</code> loops in Go, with examples.</p> <h2 id="basic-for-loop">Basic For Loop</h2> <p>The most basic form of the <code class="language-plaintext highlighter-rouge">for</code> loop in Go is the classic initialization, condition, and post statement loop. Here’s a simple example that prints numbers from 1 to 5:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="m">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example:</p> <ul> <li><code class="language-plaintext highlighter-rouge">i := 1</code> initializes the loop variable <code class="language-plaintext highlighter-rouge">i</code>.</li> <li><code class="language-plaintext highlighter-rouge">i &lt;= 5</code> is the condition that must be true for the loop to continue.</li> <li><code class="language-plaintext highlighter-rouge">i++</code> increments the variable <code class="language-plaintext highlighter-rouge">i</code> after each iteration.</li> </ul> <h2 id="for-loop-as-a-while-loop">For Loop as a While Loop</h2> <p>Go does not have a <code class="language-plaintext highlighter-rouge">while</code> loop, but you can achieve similar functionality using the <code class="language-plaintext highlighter-rouge">for</code> loop by omitting the initialization and post statements:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="m">5</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">i</span><span class="o">++</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, the loop will continue as long as <code class="language-plaintext highlighter-rouge">i &lt;= 5</code>, similar to how a <code class="language-plaintext highlighter-rouge">while</code> loop would work in other languages.</p> <h2 id="infinite-for-loop">Infinite For Loop</h2> <p>You can create an infinite loop by omitting the condition altogether:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"This will print indefinitely"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>To exit an infinite loop, you would typically use the <code class="language-plaintext highlighter-rouge">break</code> statement.</p> <h2 id="for-loop-with-range">For Loop with Range</h2> <p>Go’s <code class="language-plaintext highlighter-rouge">for</code> loop can also be used with the <code class="language-plaintext highlighter-rouge">range</code> keyword to iterate over slices, arrays, maps, and other data structures. Here’s an example with a slice:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">40</span><span class="p">,</span> <span class="m">50</span><span class="p">}</span>
    
    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">numbers</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Index: %d, Value: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example:</p> <ul> <li><code class="language-plaintext highlighter-rouge">index</code> is the index of the current element.</li> <li><code class="language-plaintext highlighter-rouge">value</code> is the value of the current element.</li> </ul> <h2 id="for-loop-in-a-nested-structure">For Loop in a Nested Structure</h2> <p>You can also nest <code class="language-plaintext highlighter-rouge">for</code> loops within each other. Here’s an example that creates a multiplication table:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="m">10</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%4d"</span><span class="p">,</span> <span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In this example, the outer loop iterates through rows and the inner loop iterates through columns, printing a multiplication table.</p> <h2 id="summary">Summary</h2> <p>The <code class="language-plaintext highlighter-rouge">for</code> loop in Go is versatile and can be used in various ways to achieve different looping constructs. Whether you need a basic iteration, a <code class="language-plaintext highlighter-rouge">while</code>-like loop, or an infinite loop, Go’s <code class="language-plaintext highlighter-rouge">for</code> loop can handle it all. It also seamlessly integrates with Go’s <code class="language-plaintext highlighter-rouge">range</code> keyword for iterating over collections.</p> <p>Experiment with these different forms of <code class="language-plaintext highlighter-rouge">for</code> loops to understand their usage and see how they fit into your Go programs. Happy coding!</p> <hr/> <p>For more information on Go loops and other Go features, check out the <a href="https://golang.org/doc/effective_go#for">official Go documentation</a>.</p>]]></content><author><name></name></author><category term="programming-tutorials"/><category term="golang"/><category term="loops"/><summary type="html"><![CDATA[An in-depth look at how to use for loops in the Go programming language]]></summary></entry></feed>